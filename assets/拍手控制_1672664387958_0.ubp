module main
author unknown
version 1 0 
description ''
variables 'clap count' b 

	spec 'r' 'flash count' 'flash count'

to 'flash count' {
  comment 'Count the number of flashes in a sequence.'
  local 'threshold' 250
  waitUntil (('[display:lightLevel]') > threshold)
  local 'count' 1
  forever {
    waitUntil (('[display:lightLevel]') < ((3 * threshold) / 4))
    resetTimer
    repeatUntil (('[display:lightLevel]') > threshold) {
      comment 'This loop awaits either the next flash or for a pause, indicating that the flashes have ended.'
      if ((timer) > 700) {
        comment 'No flash for a while, return the count.'
        return count
      }
    }
    count += 1
  }
}

script 374 50 {
whenBroadcastReceived '1'
comment 'clap once or say:
"Sad"'
'[display:mbDisplay]' 18284864
}

script 52 55 {
whenStarted
setClapThreshold 110
forever {
  'clap count' = (clapCount)
  sayIt (v 'clap count')
  sendBroadcast (v 'clap count')
}
}

script 54 254 {
comment 'Run this script and open the graph
to see the loudness changing.'
forever {
  printIt (loudness)
}
}

script 376 256 {
whenBroadcastReceived '2'
comment 'clap twice or say
"Hap -py!"'
'[display:mbDisplay]' 15237440
}

script 377 458 {
whenBroadcastReceived '3'
comment 'clap three times or say
"Go to sleep"'
'[display:mbDisplayOff]'
}


module 'LED Display' Output
author MicroBlocks
version 1 0 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) also support this primitives in a simulated "fat pixel" display.'

	spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
	spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
	spec ' ' 'displayCharacter' 'display character _' 'str' 'A'

to displayCharacter s {
  s = ('[data:join]' '' s)
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}


module Microphone Input
author MicroBlocks
version 1 2 
description 'Microphone, loudness, and clap counting support for boards with built in microphones. The microphone block usually reports values between -512 and 511, with zero for silence. However, very loud sounds may exceed that range on some boards. On the micro:bit v2, the microphone must be turned on before use.'
variables _clapThreshold _loudnessSamples 

	spec 'r' '[sensors:microphone]' 'microphone'
	spec ' ' 'turnOnMicrophone' 'turnOnMicrophone'
	spec 'r' 'loudness' 'loudness'
	spec 'r' 'clapCount' 'clap count'
	spec ' ' 'setClapThreshold' 'set clap threshold _' 'auto' 200
	spec 'r' 'guessClapThreshold' 'estimate clap threshold'
	spec ' ' '_loudnessLoop' '_loudnessLoop'

to '_loudnessLoop' {
  comment 'Sample microphone at ~2000 samples/sec, keeping the most recent N samples.'
  turnOnMicrophone
  waitMillis 20
  forever {
    for i (size _loudnessSamples) {
      atPut i _loudnessSamples ('[sensors:microphone]')
      waitMicros 500
    }
  }
}

to clapCount {
  comment 'Count the number of claps in a sequence.'
  if (_clapThreshold == 0) {
    _clapThreshold = 150
  }
  waitUntil ((loudness) > _clapThreshold)
  local 'count' 1
  forever {
    waitUntil ((loudness) < ((3 * _clapThreshold) / 4))
    resetTimer
    repeatUntil ((loudness) > _clapThreshold) {
      comment 'This loop awaits either the next clap or for a pause, indicating that the claps have ended.'
      if ((timer) > 700) {
        comment 'No clap for a while, return the count.'
        return count
      }
    }
    count += 1
  }
}

to guessClapThreshold {
  comment 'Sample the loudness for three seconds and set
_clapThreshold to 130% of the maxium.'
  local 'maxLoudness' 0
  resetTimer
  repeatUntil ((timer) > 3000) {
    maxLoudness = (maximum maxLoudness (loudness))
  }
  return ((13 * maxLoudness) / 10)
}

to loudness {
  if (_loudnessSamples == 0) {
    comment 'Initialize _loudnessSamples and start sampling.'
    _loudnessSamples = (newList 50)
    sendBroadcast '_loudnessLoop'
  }
  local 'low' 10000
  local 'high' -10000
  for n _loudnessSamples {
    low = (minimum low n)
    high = (maximum high n)
  }
  return (high - low)
}

to setClapThreshold n {
  _clapThreshold = n
}

to turnOnMicrophone {
  if ('micro:bit v2' == (boardType)) {
    comment 'Turn on the microphone and
wait for it to settle down.'
    digitalWriteOp 28 true
    waitMillis 50
  }
}

